import faker, { GenderType }       from '@faker-js/faker';
import { GeneratorOptions }        from '@common/constants';
import * as enums                  from '@common/enums';
import { TCompanyGenerateOptions } from '@common/interfaces';
import * as utils                  from '@common/utils';
import * as dto                    from '@api/dto';
import * as common                 from './common';
import { generatePayment }         from './payment';

/**@ignore*/
type CompanyData = { company: dto.CompanyCreateDto, payment: dto.PaymentCreateDto };
/**@ignore*/
type CompanyInnData = { company: dto.CompanyInnCreateDto, payment: dto.PaymentCreateDto };

const { COMPANY_DEFAULTS } = GeneratorOptions;
const { lat, lon } = common;

async function generateCargoCompany(options: TCompanyGenerateOptions = COMPANY_DEFAULTS): Promise<CompanyData> {
	console.debug("generateCargoCompany", options);
	let { type } = options;
	const { driver: { startPos, distanceDelta: delta } } = options;

	const gender1 = faker.name.gender(true).toLowerCase() as GenderType;
	const gender2 = faker.name.gender(true).toLowerCase() as GenderType;
	const gender3 = faker.name.gender(true).toLowerCase() as GenderType;
	const name: string = faker.company.companyName();
	const phone: string = faker.phone.phoneNumber('+7 999 ### ## ##');
	const email: string = common.generateEmailAddress(name);

	const cargoCompanyData: dto.CompanyCreateDto = {
		name,
		phone,
		email,
		type,
		user:                        phone,
		isDefault:                   false,
		confirmed:                   true,
		contact:                     faker.name.findName(
			faker.name.firstName(gender1),
			faker.name.lastName(gender1),
			gender1
		),
		contactSecond:               faker.name.findName(
			faker.name.firstName(gender2),
			faker.name.lastName(gender2),
			gender2
		),
		contactThird:                faker.name.findName(
			faker.name.firstName(gender3),
			faker.name.lastName(gender3),
			gender3
		),
		avatarLink:                  faker.internet.avatar(),
		directions:                  faker.helpers.arrayElements(common.DIRECTIONS, 3),
		director:                    faker.name.findName(),
		taxpayerNumber:              faker.finance.account(12),
		taxReasonCode:               faker.finance.account(12),
		registrationNumber:          faker.finance.account(12),
		paymentType:                 faker.helpers.arrayElement(['НДС 20%', 'Без НДС', ' Наличными']),
		legalAddress:                await common.generateAddressFromCoordinates(
			lat(startPos.latitude, delta),
			lon(startPos.longitude, delta)
		),
		postalAddress:               await common.generateAddressFromCoordinates(
			lat(startPos.latitude, delta),
			lon(startPos.longitude, delta)
		),
		passportGivenDate:           common.dateBetween(2000, 2020),
		passportPhotoLink:           faker.image.business(300, 300, true),
		passportRegistrationAddress: common.generateAddress(),
		passportSerialNumber:        faker.finance.account(12),
		passportIssuedBy:            common.generateAddress(),
		passportSubdivisionCode:     common.generateSerialNumber([3, 4]),
		contactPhone:                faker.phone.phoneNumber('+7 998 ### ## ##'),
		legalName:                   faker.company.catchPhrase(),
		attorneySignLink:            faker.image.business(),
		certificatePhotoLink:        faker.image.business(),
		directorOrderPhotoLink:      faker.image.business(),
		isAutogenerated:             true,
	};
	const payment = await generatePayment(cargoCompanyData);

	return { company: cargoCompanyData, payment };
}

async function generateInnCargoCompany(options: TCompanyGenerateOptions = COMPANY_DEFAULTS): Promise<CompanyInnData> {
	console.debug("generateInnCargoCompany", options);
	let { type } = options;
	const { driver: { startPos, distanceDelta: delta } } = options;

	const gender = faker.name.gender(true).toLowerCase() as GenderType;
	const name: string = faker.name.firstName(gender);
	const middleName: string = faker.name.middleName(gender);
	const lastName: string = faker.name.lastName(gender);
	const phone: string = faker.phone.phoneNumber('+7 ### ### ## ##');
	const email: string = common.generateEmailAddress(name, lastName);

	if(type === undefined)
		type = faker.helpers.arrayElement([enums.CompanyType.IE, enums.CompanyType.PI]);

	const cargoCompanyInnData: dto.CompanyInnCreateDto = {
		name,
		lastName,
		phone,
		email,
		type,
		patronymic:                  middleName,
		user:                        phone,
		isDefault:                   false,
		taxpayerNumber:              faker.finance.account(12),
		paymentType:                 utils.randomOf('НДС 20%', 'Без НДС', ' Наличными'),
		info:                        'Сгенерированная компания',
		birthDate:                   faker.date.past(40),
		passportPhotoLink:           faker.internet.avatar(),
		passportIssuedBy:            faker.address.streetAddress(true),
		passportSelfieLink:          faker.image.imageUrl(),
		passportSignLink:            faker.image.imageUrl(),
		address:                     await common.generateAddressFromCoordinates(
			lat(startPos.latitude, delta),
			lon(startPos.longitude, delta)
		),
		postalAddress:               await common.generateAddressFromCoordinates(
			lat(startPos.latitude, delta),
			lon(startPos.longitude, delta)
		),
		actualAddress:               await common.generateAddressFromCoordinates(
			lat(startPos.latitude, delta),
			lon(startPos.longitude, delta)
		),
		confirmed:                   false,
		directions:                  faker.helpers.arrayElements(common.DIRECTIONS, 3),
		passportGivenDate:           common.dateBetween(2000, 2020),
		passportRegistrationAddress: await common.generateAddressFromCoordinates(
			lat(startPos.latitude, delta),
			lon(startPos.longitude, delta)
		),
		passportSerialNumber:        faker.random.alphaNumeric(7),
		passportSubdivisionCode:     common.generateSerialNumber([3, 4]),
		contactPhone:                faker.phone.phoneNumber('+7 ### ### ## ##'),
		personalPhone:               faker.phone.phoneNumber('+7 ### ### ## ##'),
		isAutogenerated:             true,
	};

	const payment = await generatePayment(cargoCompanyInnData);
	return { company: cargoCompanyInnData, payment };
}

export async function generateCompanies(options: TCompanyGenerateOptions = COMPANY_DEFAULTS) {
	if(options.type === undefined) {
		options.type = faker.helpers.arrayElement(
			[
				enums.CompanyType.ORG,
				enums.CompanyType.IE,
				enums.CompanyType.PI
			]
		);
	}

	if(options.count === undefined)
		options.count = faker.datatype.number({ min: 3, max: 10 });

	return Promise.all(
		Array.from(Array(options.count))
				 .map(() => options.type === enums.CompanyType.ORG
										? generateCargoCompany(options)
										: generateInnCargoCompany(options))
	);
}
