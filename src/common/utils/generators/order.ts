import faker                      from '@faker-js/faker';
import * as enums                 from '@common/enums';
import * as interfaces            from '@common/interfaces';
import { GeneratorOptions }       from '@common/constants';
import { addressFromCoordinates } from '@common/utils/address';
import * as dto                   from '@api/dto';
import * as common                from './common';

/**@ignore*/
const minPrice: number = 10000,
	maxPrice: number = 200000;

const { ORDER_DEFAULTS } = GeneratorOptions;
const { lat, lon } = common;

/**@ignore*/
const generatePrice = (): number => faker.datatype.number({ min: minPrice, max: maxPrice });

async function generateDestinations(options: interfaces.TDestinationGenerateOptions = ORDER_DEFAULTS.dest)
	: Promise<Array<dto.DestinationCreateDto>> {
	let { maxSize: count } = options;
	const { distanceDelta: delta } = options;
	const destinations: dto.DestinationCreateDto[] = [];
	const dateRange = 5;
	let latitude = lat(options.startPos.latitude, delta),
		longitude = lon(options.startPos.longitude, delta);
	let date: Date = faker.date.soon(dateRange);
	if(count === undefined) count = faker.datatype.number({ min: 2, max: 10 });
	if(count > common.LETTERS.length) count = common.LETTERS.length;

	for(let i = 0; i < count; i++) {
		const address = await addressFromCoordinates(latitude, longitude);
		let latitudeModifier = faker.datatype.number({ min: -(delta ?? .5), max: delta ?? .5 }),
			longitudeModifier = faker.datatype.number({ min: -(delta ?? .5), max: delta ?? .5 });
		destinations.push(
			{
				orderId:     null,
				point:       common.LETTERS[i],
				address,
				distance:    0,
				date,
				fulfilled:   false,
				type:        i !== 0
										 ? (i !== count - 1
												? faker.helpers.arrayElement(common.DESTINATION_TYPES)
												: enums.DestinationType.UNLOAD)
										 : enums.DestinationType.LOAD,
				coordinates: [latitude, longitude],
				contact:     faker.name.findName(),
				inn:         faker.datatype.number({ min: 9999, max: 99999 }).toString(),
				phone:       faker.phone.phoneNumber('+7 9## ### ## ##'),
				comment:     faker.lorem.word(4)
			}
		);
		latitude += latitudeModifier;
		longitude += longitudeModifier;
		date = faker.date.soon(dateRange, date);
	}

	return destinations;
}

export async function generateOrder(options: interfaces.TOrderGenerateOptions = ORDER_DEFAULTS)
	: Promise<dto.OrderCreateDto> {
	const paramRange = { min: 1, max: 10, precision: 2 };
	const isBid = faker.datatype.boolean();
	const orderNumber = faker.datatype.number({ min: 999, max: 10000 });
	const price: number = generatePrice();
	let weight = faker.datatype.float(paramRange),
		volume = faker.datatype.float(paramRange),
		height = faker.datatype.float(paramRange),
		length = faker.datatype.float(paramRange),
		width = faker.datatype.float(paramRange);

	return {
		date:            faker.date.recent(10),
		dedicated:       faker.helpers.arrayElement(['Догруз', 'Не важно', 'Выделенная машина']),
		destinations:    await generateDestinations(options.dest),
		isBid,
		bidPrice:        isBid ? price + 10000 : 0,
		bidPriceVAT:     isBid ? price + 15000 : 0,
		hasProblem:      false,
		isCanceled:      false,
		isFree:          true,
		isOpen:          true,
		mileage:         0,
		number:          orderNumber,
		paymentType:     faker.helpers.arrayElement(common.PAYMENT_TYPES),
		price:           price + '|RUB',
		stage:           enums.OrderStage.AGREED_LOGIST,
		status:          enums.OrderStatus.PENDING,
		title:           `Сделка #${orderNumber}`,
		transportTypes:  faker.helpers.arrayElements(
			common.TRANSPORT_TYPES,
			faker.datatype.number({ min: 1, max: 5 })
		),
		payload:         faker.helpers.arrayElement(common.TRANSPORT_PAYLOADS),
		payloadRiskType: faker.helpers.arrayElement(common.RISK_CLASSES),
		weight:          weight > 0 ? weight : 1,
		volume:          volume > 0 ? volume : 1,
		length:          length > 0 ? length : 1,
		width:           width > 0 ? width : 1,
		height:          height > 0 ? height : 1,
		loadingTypes:    common.getFixedFromLoadingType(),
		pallets:         faker.datatype.number({ min: 0, max: 15 }),
		isAutogenerated: true,
	} as dto.OrderCreateDto;
}

export function generateOrders(options: interfaces.TOrderGenerateOptions = ORDER_DEFAULTS) {
	let { count } = options;
	if(!count)
		count = faker.datatype.number({ min: 1, max: 5 });
	return Promise.all(
		Array.from(Array(count))
				 .map(() => generateOrder(options))
	);
}
